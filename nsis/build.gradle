// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the 
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra> 
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
	ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
	ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}

if (ghidraInstallDir) {
	apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
}
else {
	throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------
apply plugin: 'java'

repositories {
	mavenCentral()
}

configurations {
  localDeps
}

dependencies {
	testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.0')
	testRuntime('org.junit.jupiter:junit-jupiter-engine:5.6.0')
	localDeps group:'org.tukaani', name:'xz', version:'1.8'
	compile (
	  configurations.localDeps
	)
}

test {
	beforeTest { descriptor ->
		logger.lifecycle("Running test: $descriptor.className")
	}

	useJUnitPlatform()

	testLogging {
		events "failed"
		exceptionFormat "full"
	}
}

task copyLibs(type: Copy) {
    from configurations.localDeps
    into 'lib'
}

buildExtension.dependsOn(copyLibs)
buildExtension.dependsOn(test)
